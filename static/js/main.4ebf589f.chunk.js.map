{"version":3,"sources":["components/contactPicker/ContactPicker.js","components/appointmentForm/AppointmentForm.js","components/tile/Tile.js","components/tileList/TileList.js","containers/appointmentsPage/AppointmentsPage.js","components/contactForm/ContactForm.js","containers/contactsPage/ContactsPage.js","App.js","index.js"],"names":["ContactPicker","name","onChange","contacts","value","selected","map","contact","AppointmentForm","title","setTitle","setContact","date","setDate","time","setTime","handleSubmit","onSubmit","type","e","target","required","placeholder","min","Date","toLocaleDateString","split","month","day","year","padStart","getTodayString","Tile","tile","className","Object","values","index","TileList","tiles","AppointmentsPage","appointments","addAppointment","useState","length","preventDefault","ContactForm","setName","phone","setPhone","email","setEmail","ContactsPage","addContact","duplicate","setDuplicate","useEffect","undefined","find","App","setAppointments","setContacts","ROUTES","to","activeClassName","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ebf589f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ContactPicker = ({ name, onChange, contacts }) => {\r\n  return (\r\n    <select name={name} onChange={onChange}>\r\n      <option value={\"\"} key={-1} selected=\"selected\">\r\n        No Contact Selected\r\n      </option>\r\n      {contacts.map((contact) => {\r\n        return (\r\n          <option value={contact} key={contact}>\r\n            {contact}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { ContactPicker } from \"../contactPicker/ContactPicker\";\r\n\r\nexport const AppointmentForm = ({\r\n  contacts,\r\n  title,\r\n  setTitle,\r\n  contact,\r\n  setContact,\r\n  date,\r\n  setDate,\r\n  time,\r\n  setTime,\r\n  handleSubmit\r\n}) => {\r\n  const getTodayString = () => {\r\n    const [month, day, year] = new Date()\r\n      .toLocaleDateString(\"en-US\")\r\n      .split(\"/\");\r\n    return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\r\n  };\r\n\r\n  const getContactNames = () => {\r\n    return contacts.map((contact) => contact.name);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n          required\r\n          placeholder=\"Appointment Purpose\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <ContactPicker\r\n          name=\"contact\"\r\n          value={contact}\r\n          contacts={getContactNames()}\r\n          onChange={(e) => setContact(e.target.value)}\r\n          placeholder=\"Appointment With\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"date\"\r\n          min={getTodayString()}\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"time\"\r\n          value={time}\r\n          onChange={(e) => setTime(e.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n      <br />\r\n      <input type=\"submit\" value=\"Add Appointment\" />\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Tile = ({ tile }) => {\r\n  return (\r\n    <div className=\"tile-container\">\r\n      {Object.values(tile).map((value, index) => (\r\n        <p key={index} className={`${index === 0 ? \"tile-title\" : \"\"} tile`}>\r\n          {value}\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Tile } from \"../tile/Tile\";\r\n\r\nexport const TileList = ({ tiles }) => {\r\n  return (\r\n    <div>\r\n      {tiles.map((tile, index) => (\r\n        <Tile key={index} tile={tile} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nimport { AppointmentForm } from \"../../components/appointmentForm/AppointmentForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const AppointmentsPage = ({\r\n  appointments,\r\n  addAppointment,\r\n  contacts\r\n}) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [contact, setContact] = useState(\r\n    contacts.length > 0 ? contacts[0].name : \"\"\r\n  );\r\n  const [date, setDate] = useState(\"\");\r\n  const [time, setTime] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addAppointment(title, contact, date, time);\r\n    setTitle(\"\");\r\n    setContact(\"\");\r\n    setDate(\"\");\r\n    setTime(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <h2>Add Appointment</h2>\r\n        <AppointmentForm\r\n          contacts={contacts}\r\n          title={title}\r\n          setTitle={setTitle}\r\n          contact={contact}\r\n          setContact={setContact}\r\n          date={date}\r\n          setDate={setDate}\r\n          time={time}\r\n          setTime={setTime}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Appointments</h2>\r\n        <TileList tiles={appointments} />\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const ContactForm = ({\r\n  name,\r\n  setName,\r\n  phone,\r\n  setPhone,\r\n  email,\r\n  setEmail,\r\n  handleSubmit,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          required\r\n          placeholder=\"Contact Name\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"phone\"\r\n          value={phone}\r\n          onChange={(e) => setPhone(e.target.value)}\r\n          required\r\n          placeholder=\"Contact Phone (###-###-####)\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          required\r\n          placeholder=\"Contact Email\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <input type=\"submit\" value=\"Add Contact\" />\r\n    </form>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [duplicate, setDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!duplicate) {\r\n      addContact(name, phone, email);\r\n      setName(\"\");\r\n      setPhone(\"\");\r\n      setEmail(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const nameIsDuplicate = () => {\r\n      const found = contacts.find((contact) => contact.name === name);\r\n      if (found !== undefined) {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    if (nameIsDuplicate()) {\r\n      setDuplicate(true);\r\n    } else {\r\n      setDuplicate(false);\r\n    }\r\n  }, [name, contacts, duplicate]);\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <h2>\r\n          Add Contact\r\n          {duplicate ? \" - Name Already Exists\" : \"\"}\r\n        </h2>\r\n        <ContactForm\r\n          name={name}\r\n          setName={setName}\r\n          phone={phone}\r\n          setPhone={setPhone}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList tiles={contacts} />\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Switch, Route, Redirect, NavLink } from \"react-router-dom\";\r\n\r\nimport { AppointmentsPage } from \"./containers/appointmentsPage/AppointmentsPage\";\r\nimport { ContactsPage } from \"./containers/contactsPage/ContactsPage\";\r\n\r\nfunction App() {\r\n  const [appointments, setAppointments] = useState([]);\r\n  const [contacts, setContacts] = useState([]);\r\n\r\n  const ROUTES = {\r\n    CONTACTS: \"/contacts\",\r\n    APPOINTMENTS: \"/appointments\",\r\n  };\r\n\r\n  const addAppointment = (title, contact, date, time) => {\r\n    setAppointments([\r\n      ...appointments,\r\n      {\r\n        title: title,\r\n        contact: contact,\r\n        date: date,\r\n        time: time,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const addContact = (name, phone, email) => {\r\n    setContacts([\r\n      ...contacts,\r\n      {\r\n        name: name,\r\n        phone: phone,\r\n        email: email,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <NavLink to={ROUTES.CONTACTS} activeClassName=\"active\">\r\n          Contacts\r\n        </NavLink>\r\n        <NavLink to={ROUTES.APPOINTMENTS} activeClassName=\"active\">\r\n          Appointments\r\n        </NavLink>\r\n      </nav>\r\n      <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Redirect to={ROUTES.CONTACTS} />\r\n          </Route>\r\n          <Route path={ROUTES.CONTACTS}>\r\n            <ContactsPage contacts={contacts} addContact={addContact} />\r\n          </Route>\r\n          <Route path={ROUTES.APPOINTMENTS}>\r\n            <AppointmentsPage\r\n              appointments={appointments}\r\n              addAppointment={addAppointment}\r\n              contacts={contacts}\r\n            />\r\n          </Route>\r\n        </Switch>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport \"./index.css\";\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}